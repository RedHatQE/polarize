<TestCaseMetadata project-id="RedHatEnterpriseLinux7">
    <!-- workitems can contain testcase or requirement elements -->
    <workitems>
        <!-- The Annotation equivalent of the XML.  The Annotation Processor will generate the equivalent
        <testcase> subtree and insert it into the TestCaseMetadata -> workitems tree.

        Note that the description will be obtained by getting the description from the existing @Test annotation
        description, and the <teststep> -> <method name=""> will be obtained since we know the name of the method
        already while the Annotation Processor scans the code.

        @Polarion(author="Sean Toner",
                  projectId="RedHatEnterpriseLinux7",
                  caseimportance="high",
                  caseposneg="positive",
                  caselevel="component",
                  testtype="functional",
                  @Requirement(polarionId="", config="", feature=""),
                  setup="Description of any preconditions that must be established for test case to run",
                  @TestSteps({@TestStep(expected="The expected value")}),
                  teardown="The methods to clean up after a test method")
        -->
        <testcase author="Sean Toner" workitem-type="TestCase">
            <description>This is an example description for a TestCase</description>
            <title>class.method_name</title>
            <caseimportance value="high"/>
            <caseposneg value="positive"/>
            <caselevel value="component"/>
            <caseautomation value="automated"/>
            <testtype value="functional"/>
            <status value="draft"/>

            <!-- If the polation-id is given, the config and feature attributes will be ignored.  It it is empty
            The Processor will look -->
            <requirement polarion-id="" config="" feature=""/>

            <!-- From an automation POV, we can probably look for the @BeforeClass belonging to this
             method.  Not sure how to get the @BeforeGroup or @BeforeSuite though -->
            <setup>Description of any preconditions that must be established for test case to run</setup>

            <!-- From an automation POV, we probably can't get every assertion (unless we can annotate
            the assert method?).  What we can do is get the name of the method of the test and its
            description though so that our tests will only have a single step.-->
            <teststeps>
                <teststep>
                    <method>SomeClass.someMethod</method>
                    <description>description of test step</description>
                    <expected>the expected value</expected>
                </teststep>
            </teststeps>

            <!-- For automation, like the setup, we can look at the @AfterClass for this method, but the
             @AfterSuite and @AfterGroup might be tricky to do -->
            <teardown>The methods to clean up after a test method</teardown>
        </testcase>
    </workitems>
</TestCaseMetadata>