plugins {
    id 'java-library' // or 'groovy' Must be explicitly applied
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'signing'
    id 'maven-publish'
}

group 'com.github.redhatqe.polarize'
version '0.7.1-SNAPSHOT'
String archivesBaseName = "polarize"
String projectURL = 'https://github.com/RedHatQE/polarize'
String devURL = 'git@github.com:RedHatQE/polarize.git'
String pomPath = "${project.projectDir}/build/tmp/pom.xml"
String mvnPom = "${project.projectDir}/build/tmp/${project.name}-${project.version}.pom"
String arcDir = "${project.projectDir}/artifacts/com/github/redhatqe/polarize/polarize/${project.version}"
String arcPom = "${arcDir}/${project.name}-${project.version}.pom"
File arcPomFile = makeSigningPomFile(arcDir)

repositories {
    mavenCentral()
    mavenLocal()
}

jar {
    manifest {
        attributes('Implementation-Title': 'polarize',
                   'Implementation-Version': version,
                   'Main-Class': 'com.github.redhatqe.polarize.JarHelper')
    }
    from sourceSets.main.output
    from sourceSets.main.allJava
}

dependencies {
    testCompileOnly group: 'junit', name: 'junit', version: '4.12'
    testCompileOnly 'org.testng:testng:6.9.10'
    testCompileOnly 'info.cukes:cucumber-java8:1.2.4'
    implementation group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0-beta-1'
    implementation 'org.reflections:reflections:0.9.10'
    implementation 'org.testng:testng:6.9.10'
    implementation 'com.google.code.gson:gson:2.6.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    //compile 'org.apache.tinkerpop:gremlin-core:3.2.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    implementation 'org.apache.httpcomponents:httpmime:4.5.2'
    implementation 'org.json:json:20140107'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.2'
    //compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.2'
    implementation group: 'org.apache.activemq', name: 'activemq-all', version: '5.14.1'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

shadowJar {
    manifest {
        attributes('Implementation-Title': 'polarize',
                   'Implementation-Version': version,
                   'Main-Class': 'com.github.redhatqe.polarize.JarHelper')
    }
}

ext {
    isReleaseVersion = !version.endsWith("TESTING")
    pomFilePath = pomPath
    pomFile = file(pomFilePath)
}

// Creates a configuration container called pom
configurations {
    pom
}

// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
    classpath += sourceSets.test.compileClasspath
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    archives shadowJar
    if (arcPomFile != null && arcPomFile.exists()) {
        pom arcPomFile
    }
}


// We need to sign the POM
task signPom(type: Sign) {
    if (arcPomFile != null)
        sign arcPomFile
}

task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar, shadowJar]) {
    sign configurations.archives
}

if (arcPomFile != null && arcPomFile.exists()) {
    task preparePublication (dependsOn : [signJars, signPom])
} else {
    task preparePublication (dependsOn : signJars)
}

signing {
    useGpgCmd()
    sign configurations.archives
}

// extract signature file and give them proper name
def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [[archive: signedSources, classifier: 'sources', extension: 'jar.asc']
           ,[archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc']
           ,[archive: signedJar,     classifier: null,      extension: 'jar.asc']
           ]
}

def getPomSignature = {
    def sPom = project.tasks.signPom.signatureFiles.collect{it}
    return sPom[0]
}

def findPom(String ad) {
    def arcDirFile = file(ad)
    if (arcDirFile.exists()) {
        // Get the files in the directory
        def result = arcDirFile.list().any { s -> s.endsWith(".pom")}
        return result
    }
    return false
}

def findPomFiles(String ad) {
    def arcDirFile = file(ad)
    if (arcDirFile.exists()) {
        return arcDirFile.list().findAll {f -> f.endsWith(".pom")}
    }
}

def makeSigningPomFile(String ad) {
    def found = findPomFiles(ad)
    if (found) {
        return file("${ad}/${found[-1]}")
    }
}

publishing {
    publications {
        gpgJars(MavenPublication) {
            getSignatureFiles().each { signature ->
                artifact (signature.archive) {
                    classifier = signature.classifier
                    extension  = signature.extension
                }
            }

            pom.withXml {
                asNode().appendNode('name', archivesBaseName)
                asNode().appendNode('description', 'Annotations to supply metadata for testcase management')
                asNode().appendNode('url', projectURL)

                Node scmNode = new Node(asNode(), 'scm')
                scmNode.appendNode('url', 'scm:git:' + projectURL)
                scmNode.appendNode('connection', "scm:git:${projectURL}.git")
                scmNode.appendNode('developerConnection', "scm:git:${devURL}")

                Node devsNode = new Node(asNode(), 'developers')
                Node devNode = new Node(devsNode, 'developer')
                devNode.appendNode('id', 'jstavel')
                devNode.appendNode('name', 'Jan Stavel')
                devNode.appendNode('email', 'jstavel@redhat.com')

                Node licensesNode = new Node(asNode(), 'licenses')
                Node licenseNode = new Node(licensesNode, 'license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/license/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                writeTo (project.ext.pomFile)
                File pomFile = new File(pomPath)
            }
        }

        mavenCustom(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('name', archivesBaseName)
                asNode().appendNode('description', 'Annotations to supply metadata for testcase management')
                asNode().appendNode('url', projectURL)

                Node scmNode = new Node(asNode(), 'scm')
                scmNode.appendNode('url', 'scm:git:' + projectURL)
                scmNode.appendNode('connection', "scm:git:${projectURL}.git")
                scmNode.appendNode('developerConnection', "scm:git:${devURL}")

                Node devsNode = new Node(asNode(), 'developers')
                Node devNode = new Node(devsNode, 'developer')
                devNode.appendNode('id', 'jstavel')
                devNode.appendNode('name', 'Jan Stavel')
                devNode.appendNode('email', 'jstavel@redhat.com')

                Node licensesNode = new Node(asNode(), 'licenses')
                Node licenseNode = new Node(licensesNode, 'license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/license/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }

        if (findPom(arcDir)) {
            gpgPom(MavenPublication) {
                artifact (getPomSignature()) {
                    classifier = null
                    extension  = 'pom.asc'
                }
            }
        }
    }

    repositories {
        maven {
            if (arcPomFile != null && arcPomFile.exists()) {
                if (project.version.contains("SNAPSHOT")) {
                    url 'https://oss.sonatype.org/content/repositories/snapshots'
                }
                else {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                }
                // read the properties from a file gradle.properties (the file is in a GRADLE_HOME dir or in a project root dir)
                String user = project.getProperty("ossrhUsername")
                String pw = project.getProperty("ossrhPassword")
                credentials {
                    username = user
                    password = pw
                }
            } else {
                url "file:/${project.projectDir}/artifacts"
            }
        }
    }
}

task copyTask(type: Copy) {
    from mvnPom
    into "${project.projectDir}/artifacts/com/github/redhatqe/polarize/polarize/${project.version}"
}


task classPath {
    doLast {
        println sourceSets.main.runtimeClasspath.asPath
    }
}


task getPomFiles {
    doLast {
        println findPomFiles(arcDir)
    }
}
