plugins {
    id 'java' // or 'groovy' Must be explicitly applied
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group 'com.github.redhatqe.polarize'
version '0.5.0'
String archivesBaseName = "polarize"
String projectURL = 'https://github.com/RedHatQE/polarize'
String devURL = 'git@github.com:RedHatQE/polarize.git'
// Change this to where your polarize.properties file is stored
String polarizePropertyFile = '/home/stoner/.polarize/polarize.properties'
String pomPath = "${project.projectDir}/build/tmp/pom.xml"
String mvnPom = "${project.projectDir}/build/tmp/${project.name}-${project.version}.pom"
String arcDir = "${project.projectDir}/artifacts/com/github/redhatqe/polarize/polarize/${project.version}"
String arcPom = "${arcDir}/${project.name}-${project.version}.pom"
File arcPomFile = file(arcPom)
sourceCompatibility = 1.8
targetCompatibility = 1.8

['java', 'com.github.johnrengelman.shadow',
 'maven', 'signing', 'maven-publish'].each {
    apply plugin : it
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

repositories {
    mavenCentral()
    jcenter()
}

jar {
    from sourceSets.main.output
    from sourceSets.main.allJava
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.testng:testng:6.9.10'
    testCompile 'info.cukes:cucumber-java8:1.2.4'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0-beta-1'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.testng:testng:6.9.10'
    compile 'com.google.code.gson:gson:2.6.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    compile 'org.apache.tinkerpop:gremlin-core:3.2.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile 'org.apache.httpcomponents:httpmime:4.5.2'
    compile 'org.json:json:20140107'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.2'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.2'
    compile group: 'org.apache.activemq', name: 'activemq-client', version: '5.14.0'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

shadowJar {
    manifest {
        attributes('Implementation-Title': 'Jong',
                   'Implementation-Version': version,
                   'Main-Class': 'com.github.redhatqe.polarize.JarHelper')
    }
}

ext {
    pomFilePath = pomPath
    pomFile = file(pomFilePath)
}

// Creates a configuration container called pom
configurations {
    pom
}

// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    if (arcPomFile.exists()) {
        pom arcPomFile
    }
}


// We need to sign the POM
task signPom(type: Sign) {
    sign arcPomFile
    //println "========> in signPom: ${configurations.pom}"
}

task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {
    sign configurations.archives
    //println "========> in signJars: ${configurations.archives}"
}

if (arcPomFile.exists()) {
    task preparePublication (dependsOn : [signJars, signPom])
} else {
    task preparePublication (dependsOn : signJars)
}

signing {
    sign configurations.archives
}

// extract signature file and give them proper name
def getSignatureFiles = {
    //println "############################################"
    //println "In getSignatureFiles"
    //println "############################################"
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    println "Signed Files: ${allFiles}"
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [[archive: signedSources, classifier: 'sources', extension: 'jar.asc']
           ,[archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc']
           ,[archive: signedJar,     classifier: null,      extension: 'jar.asc']
           ]
}

def getPomSignature = {
    def sPom = project.tasks.signPom.signatureFiles.collect{it}
    return sPom[0]
}

publishing {
    publications {
        gpgJars(MavenPublication) {
            getSignatureFiles().each {signature ->
                artifact (signature.archive) {
                    classifier = signature.classifier
                    extension  = signature.extension
                }
            }

            pom.withXml {
                //println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                //println "Configuring the pom"
                //println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

                asNode().appendNode('name', archivesBaseName)
                asNode().appendNode('description', 'Annotations to supply metadata for testcase management')
                asNode().appendNode('url', projectURL)

                Node scmNode = new Node(asNode(), 'scm')
                scmNode.appendNode('url', 'scm:git:' + projectURL)
                scmNode.appendNode('connection', "scm:git:${projectURL}.git")
                scmNode.appendNode('developerConnection', "scm:git:${devURL}")

                Node devsNode = new Node(asNode(), 'developers')
                Node devNode = new Node(devsNode, 'developer')
                devNode.appendNode('id', 'stoner')
                devNode.appendNode('name', 'Sean Toner')
                devNode.appendNode('email', 'stoner@redhat.com')

                Node licensesNode = new Node(asNode(), 'licenses')
                Node licenseNode = new Node(licensesNode, 'license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/license/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                //println asString().toString()
                writeTo (project.ext.pomFile)
                File pomFile = new File(pomPath)
                //println "======================================="
                //println "After writing to pom"
                //println "======================================="
                //println pomFile.text
            }
        }

        mavenCustom(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                //println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                //println "Configuring the pom"
                //println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

                asNode().appendNode('name', archivesBaseName)
                asNode().appendNode('description', 'Annotations to supply metadata for testcase management')
                asNode().appendNode('url', projectURL)

                Node scmNode = new Node(asNode(), 'scm')
                scmNode.appendNode('url', 'scm:git:' + projectURL)
                scmNode.appendNode('connection', "scm:git:${projectURL}.git")
                scmNode.appendNode('developerConnection', "scm:git:${devURL}")

                Node devsNode = new Node(asNode(), 'developers')
                Node devNode = new Node(devsNode, 'developer')
                devNode.appendNode('id', 'stoner')
                devNode.appendNode('name', 'Sean Toner')
                devNode.appendNode('email', 'stoner@redhat.com')

                Node licensesNode = new Node(asNode(), 'licenses')
                Node licenseNode = new Node(licensesNode, 'license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/license/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }

        if (arcPomFile.exists()) {
            gpgPom(MavenPublication) {
                artifact (getPomSignature()) {
                    classifier = null
                    extension  = 'pom.asc'
                }
            }
        }
    }

    repositories {
        maven {
            if (arcPomFile.exists()) {
                if (project.version.contains("SNAPSHOT")) {
                    url 'https://oss.sonatype.org/content/repositories/snapshots'
                }
                else {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                }
                File f = new File(polarizePropertyFile)
                Properties props = new Properties()
                props.load(f.newDataInputStream())
                String user = props.getProperty("ossrhUsername")
                String pw = props.getProperty("ossrhPassword")
                credentials {
                    username = user
                    password = pw
                }
            } else {
                url "file:/${project.projectDir}/artifacts"
            }
        }
    }
}

task copyTask(type: Copy) {
    from mvnPom
    into "${project.projectDir}/artifacts/com/github/redhatqe/polarize/polarize/${project.version}"
}


task classPath << {
    println sourceSets.main.runtimeClasspath.asPath
}