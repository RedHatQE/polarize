buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven'
apply plugin: 'signing'

group 'com.github.redhatqe.polarize'
version '0.7.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

String projectURL = 'https://github.com/RedHatQE/polarize'
String devURL = 'git@github.com:RedHatQE/polarize.git'
String propFile = System.getProperty("user.home") + "/.polarize/polarize-project.properties"

class Creds {
    public String user
    public String pw

    Creds(String u, String p) {
        this.user = u
        this.pw = p
    }
}

def getCreds(String polarizePropertyFile) {
    File f = new File(polarizePropertyFile)
    Properties props = new Properties()
    props.load(f.newDataInputStream())
    return new Creds(props.getProperty("ossrhUsername"), props.getProperty("ossrhPassword"))
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

jar {
    manifest {
        attributes('Implementation-Title': 'polarize',
                'Implementation-Version': version,
                'Main-Class': 'com.github.redhatqe.polarize.JarHelper')
    }
    from sourceSets.main.output
    from sourceSets.main.allJava
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.testng:testng:6.9.10'
    testCompile 'info.cukes:cucumber-java8:1.2.5'
    testCompile 'info.cukes:cucumber-junit:1.2.5'

    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0-beta-1'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.testng:testng:6.9.10'
    compile 'com.google.code.gson:gson:2.6.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.2'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.8'
    compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.14.5'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile 'org.apache.httpcomponents:httpmime:4.5.2'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

    //compile files('/home/stoner/Projects/polarize-reporter/build/libs/polarize-reporter-0.0.1-SNAPSHOT-all.jar')
    //compile files('/home/stoner/Projects/byzantine/build/libs/byzantine-0.2.0-SNAPSHOT-all.jar')

    //compile group: 'com.github.redhatqe.polarize', name: 'polarize-bus', version: '0.0.3-SNAPSHOT'
    //compile files('/home/stoner/Projects/polarize-bus/build/libs/polarize-bus-0.0.3-SNAPSHOT-all.jar')
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

shadowJar {
    manifest {
        attributes('Implementation-Title': 'polarize',
                   'Implementation-Version': version,
                   'Main-Class': 'com.github.redhatqe.polarize.JarHelper')
    }
}


// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
    classpath += sourceSets.test.compileClasspath
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar, sourceJar, javadocJar, shadowJar
}

signing {
    sign configurations.archives
}


uploadArchives {
    repositories {
        mavenDeployer {
            Creds creds = getCreds(propFile)
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: creds.user, password: creds.pw)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: creds.user, password: creds.pw)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description 'Library to help with configuration'
                url projectURL

                scm {
                    connection "scm:git:${projectURL}.git"
                    developerConnection "scm:git:${devURL}"
                    url projectURL
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'stoner'
                        name 'Sean Toner'
                        email 'stoner@redhat.com'
                    }
                }
            }
        }
    }
}

task classPath {
    doLast {
        println sourceSets.main.runtimeClasspath.asPath
    }
}


task getPomFiles {
    doLast {
        println findPomFiles(arcDir)
    }
}


task classPathPerLine {
    doLast {
        sourceSets.main.runtimeClasspath.each {
            println "${it}"
        }
    }
}